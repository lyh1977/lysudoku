/*
 * Copyright (C) 2009 Roman Masek
 *
 * This file is part of OpenSudoku.
 *
 * OpenSudoku is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OpenSudoku is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OpenSudoku.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org.ly.lysudoku.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import org.ly.lysudoku.Grid;
import org.ly.lysudoku.R;
import org.ly.lysudoku.game.SudokuGame;
import org.ly.lysudoku.utils.LogUtil;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * This class helps open, create, and upgrade the database file.
 */
public class DatabaseHelper extends SQLiteOpenHelper {

    public static final int DATABASE_VERSION = 9;
    private static final String TAG = "DatabaseHelper";
    private Context mContext;

    DatabaseHelper(Context context) {
        super(context, SudokuDatabase.DATABASE_NAME, null, DATABASE_VERSION);
        this.mContext = context;
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL("CREATE TABLE " + SudokuDatabase.SUDOKU_TABLE_NAME + " ("
                + SudokuColumns._ID + " INTEGER PRIMARY KEY,"
                + SudokuColumns.FOLDER_ID + " INTEGER,"
                + SudokuColumns.CREATED + " INTEGER,"
                + SudokuColumns.STATE + " INTEGER,"
                + SudokuColumns.TIME + " INTEGER,"
                + SudokuColumns.LAST_PLAYED + " INTEGER,"
                + SudokuColumns.DATA + " Text,"
                + SudokuColumns.PUZZLE_NOTE + " Text,"
                + SudokuColumns.COMMAND_STACK + " Text"
                + ");");

        db.execSQL("CREATE TABLE " + SudokuDatabase.FOLDER_TABLE_NAME + " ("
                + FolderColumns._ID + " INTEGER PRIMARY KEY,"
                + SudokuColumns.CREATED + " INTEGER,"
                + FolderColumns.NAME + " TEXT"
                + ");");

        int start = 1;
        ArrayList<String> rList = OSDData.LoadFromFile(OSDData.EASYFILE);
        int rc = insetGame(db, start, mContext.getString(R.string.difficulty_easy), 1, "EASY", rList);
        start += rc;

        rList = OSDData.LoadFromFile(OSDData.MEDIUMFILE);
        rc = insetGame(db, start, mContext.getString(R.string.difficulty_medium), 2, "MID", rList);
        start += rc;

        rList = OSDData.LoadFromFile(OSDData.HARDFILE);
        rc = insetGame(db, start, mContext.getString(R.string.difficulty_hard), 3, "HARD", rList);
        start += rc;

        rList = OSDData.LoadFromFile(OSDData.VERYHARDFILE);
        String fName = mContext.getString(R.string.difficulty_verry_hard);
        rc = insetGame(db, start, fName, 4, "VHD", rList);
        start += rc;

        rList = OSDData.LoadFromFile(OSDData.VERYHARDFILE2);
        rc = insetGame(db, start, fName + "2", 5, "VHD2", rList);
        start += rc;

        rList = OSDData.LoadFromFile(OSDData.VERYHARDFILE3);
        rc = insetGame(db, start, fName + "3", 6, "VHD3", rList);

        start += rc;
        rList = OSDData.LoadFromFile(OSDData.HELL);
        rc = insetGame(db, start, mContext.getString(R.string.difficulty_hell), 7, "HELL", rList);

        start += rc;
        rList = OSDData.LoadFromFile(OSDData.HELL2);
        rc = insetGame(db, start, mContext.getString(R.string.difficulty_hell)+"2", 8, "HELL2", rList);

        start += rc;
        rc = insetIce(db, start, 9);
        start += rc;
       rc= insetSuper(db, start, 10);



        insertFolder(db, SudokuDatabase.TEMP_FORDER_ID, "Generator");
        //insertSudoku(db, SudokuDatabase.TEMPID, SudokuDatabase.TEMPID, "TEMP", "000030065460950200000086004003070006004090100500010300200140000007065028630020000");
        createIndexes(db);
    }

    private int insetGame(SQLiteDatabase db, int start, String folderName, int folderId, String gname, List<String> list) {
        int ok = 0;
        try {
            insertFolder(db, folderId, folderName);
            int baseSudokuID = start;
            for (int i = 0; i < list.size(); i++) {
                if (Grid.isValid(list.get(i))) {
                    insertSudoku(db, folderId, baseSudokuID + i, gname + String.format("%04d", i + 1), list.get(i));
                    ok++;
                }
            }
        } catch (Exception er) {
            er.printStackTrace();
            LogUtil.e(er.getMessage());
        }
        return ok;
    }

    private int insetIce(SQLiteDatabase db, int start, int folderId) {
        String[] ice_packs = {
                "150000003004000502060070009500706300702004100006010000000320000320008700005000031",
                "001500200200001070407060001004700900009600080000894015070000040920000006105000800",
                "003000482000200009420098051005007010000000600701020000004000506000070003100305020",
                "900610700001000020080072000010400058400060009300080204000700000860030000005840030",
                "700001920040200071210000460490700000020409036003800090000320050050000000002007000",
                "820010034005000000403060050600100380501908000004030019000790800008400100000000093",
                "010200000325007008904000000100805070200010083070000000630500004000302906000004030",
                "010830290002004300003020008080040052509080030006010000300071000070090100000300720",
                "300100587805003000000500006400051768508006001006800200000040090050018000700900000",
                "006000002080070060900000010060000900709400000200006030603910048070380196000060000",
                "008079046070400001000003087020080000001000000086902030064300590100800000000006003",
                "070060090003709061000001200010020430090100000704090000000080740400006002057012000",
                "904800007005000069070509040063200000090045000507300000000100024050082700000930800",
                "008006023010020090020905701780300009000001000241000000000500040004000902830009006",
                "200041096090000100006009000000490003030050008600002000360020041007003800000060237",
                "040800020002000600360010004000080000800100005200300400130608500600079001027030006",
                "000001008400009000030875000025100047040650000103040600010000580700004030004010200",
                "400038120003004070000760403001090034009800007200470900700100000054300000010000090",
                "050002860000000201042010000001500030400000005625007008004060300013079006000103002",
                "800200003090003000300070102200010000040002006003040508020900061400020700001500200",
                "200000076360000800000670000405206080000710040070400200050800400030000720004100058",
                "000006900008000007030040006007060130210003000006001004602030071090000000000128609",
                "000400019007090458000500602000000500326700000090304000060009080008040007900870000",
                "000010002000000943000002186080400005300005000005090800009040078760800000048703009",
                "000409003546200000003000604000006008000308760605090302254900000708000030000000040",
                "000310800030002001010009070980506000004190006000000050098000000300900500520070490",
                "020080000890730002100090750400000010609008005010006000000000420000060087908027001",
                "940080310102000608000006200060001020208009400000000006407600000000200080020057904",
                "400000013120038000003100000001609000002070000900000701309050000510803002080000045",
                "000800052040070010000051700000000001900008007300507000670000900490360108083000046",
                "090100000005072104300500000000700000038009001400850002043607009000000600860900037",
                "007015002005007800100200000050000071002056980080700000000400230000093700003502006",
                "507000060400006500000000984001302058024050000050001400100007005000200003000038100",
                "702300100000000007030170090000025008927010000005006700510007060400001809200040071",
                "090800046800600900000700002062000004300400000500060001030271050600504020000000407",
                "438900000106000920000100004510800706060470000847050000600080002090006030300000600",
                "000020590001040000009800400000090085000207000070508030040302060260000310093080200",
                "507800020030967008084250000300040002012600000006000090000005007100720503000000210",
                "010002860060180070200700103700008200000000007826000490052001000470006000080090000",
                "004067501350900006700400080040200050000040100020701093500004000009070004430000070",
                "409600700000009841003070960006503100005007000300060000908100020260000000000042000",
                "680900400300050100009700603004093200210070030000600000090000300000308060003500004",
                "000471960090000008400980070005004007340000516002600000000260001200000700030008609",
                "007840903000000008008079000006032400400600300000000006060290030010000594900005620",
                "480000750203000060010000082020016005700008200040000000162800000000750000070021800",
                "005020300003806070008503200070900008000007930509060700900031000000600043004005000",
                "000008090090001508238050007500600320010000700003010900000000050800002000076045800",
                "060020007000001560037900000400002300002000008650070040000098001700000085820500400",
                "002060004806400103090800200200005039901000008003000400000040000000008075030906040",
                "070002009204000300001400700009003000000020054010540900000030090300074008020109003",
                "400800007900400006003000000052007030096000020004000160000006070037980601040003200",
                "200309506507010300000040081000004000809700100070003068900000800000001035056000000",
                "600000003000018060000000020500041008030006000400503006214709080008000070060080209",
                "172500803090000000508000700000050930000000008083007051030020086001300009050100340",
                "000000000020300905000061740000006007007004030900000450000105824854020000200640500",
                "070080006003009007002704090230000000140002070800900020300000160000090000008056042",
                "310004000075100400204070001020009060000003510000400900700250000400000100006040052",
                "060481000080007001009020000800092050670000008000708002000004503006009800400870100",
                "000300070400007908075800060007900040600078009049126000700041000001000304900080000",
                "320750000007600004008900000000006430046830500030000086003080200000000801089002043",
                "090080000001703000030060075600310709059000600000695080007130004080000010900000300",
                "009000040001000000420800600000005270090237004000610890046090080000003400050000901",
                "002006000005000064800003500008900000040060800120000070004071903003600000290430050",
                "590000102407901380120000000004080030802009004000400070006200000205008000780340020",
                "703500806080000005540000230007040020000805900090300000070050000004009000035200170",
                "800007390100060005030050080900500820000700904010000003760823000001000030000071000",
                "023000000700014000040300807000007062050020030200000000032070986019206000670930000",
                "080030900000508400506401070200005700008000090050109002020803060800007009307050000",
                "730510008081030000009460000000020005002070600095006720000000800028001040500200000",
                "080040070001800000740000809168050000000084001430019000000402705076000020000570090",
                "700800043000000900003600050000000000950104007400789500501070000300900065020350100",
                "050790800008103006030040000000200009000070160000460005040000020702504000005900607",
                "300209000079103000000000000058000200031000060296018005010300800640821000000007601",
                "060400320100060000007000004410905000700000000096730000950600070000010906600070403",
                "026003000530040200008900003003001907090704000070000604000000090007050400360410008",
                "820500003000016009000300400060001200010905070000040091001000508080150900359000007",
                "400630700007208000003000009500146000000003400048927600000800005890060170020400900",
                "005000010006000002002809500020680000608070009010020000001032080009508040080090003",
                "046830000000500100305000400460700051020000040050008609094007008000060900002900064",
                "000001700000000302509027000605100070000050009003004600064702000010005007007030901",
                "060000000070001800201690300000060710006007003030409006010002000594006000082050097",
                "900015400000030068000260905004000070000580000590001000003052090450000200029608050",
                "004000000090000007060204900002608000080000023400900800046302008830040260005100000",
                "900800600000020030001006700029000305600400000007000064000094003045008900300570400",
                "600030057003006000040002093460070000900060002032900700010020570000007300300100028",
                "169040350540000000000950000901060002600003090400100600020030400800704000094000006",
                "200030810005000630030400007002000078010000400504067003400200900000050300006001002",
                "000052600903000000060000092002890704000006501000040000390400006470620000006009008",
                "000410080000007001301000400496030000000002048200000130002065004105000006900080050",
                "001050084000000060846000750400100000500020008100500600625300001000070006780000200",
                "920001000006800050000093602760239000489060000500000060200010700000900004000080096",
                "003000000052004306600308070080900000004000980036010002400032800008600000360001000",
                "034006090650800000002030060000004000400260005001700024500340016000000002010600070",
                "006002050005760000120059000250904300000020507000800020900207100010500070503100002",
                "080020406020604085600500000000000010009016002170802650700000900000069500008105000",
                "100000400970002060004716000409370000700000300050008970002000003000800040007024680",
                "090041053040600000000093040458007201000000590000510078600000020012400000000080005",
                "200903500304008029905204060001000800000041030000080005008007000400800600000000298",
                "400070080009000007075008006010009603900060200006830004390005060000400009500096000",
                "680003090003910000200080506000000049900000200002600000040300000520094080300062001"};
        List<String> rList = Arrays.asList(ice_packs);


        return insetGame(db, start, mContext.getString(R.string.difficulty_ice), folderId, "ICE", rList);
    }

    private int insetSuper(SQLiteDatabase db, int start, int folderId) {
        String[] ice_packs = {
                "500000300020100070008000009040007000000821000000600010300000800060004020009000005",
                "800000009040001030007000600000023000050904020000105000006000700010300040900000008",
                "000070100000008050020900003530000000062000004094600000000001800300200009000050070",
                "000006080000100200009030005040070003000008010000200600071090000590000004804000000",
                "000056000050109000000020040090040070006000300800000002300000008002000600070500010",
                "500000004080006090001000200070308000000050000000790030002000100060900080400000005",
                "070200009003060000400008000020900010800004000006030000000000600090000051000700002",
                "100080000005900000070002000009500040800010000060007200000000710000004603030000402",
                "000900100000080007004002050200005040000100900000070008605000030300006000070000006",
                "000001080030500200000040006200300500000008010000060004050000700300970000062000000",
                "800000005040003020007000100000004000090702060000639000001000700030200040500000008",
                "900000001030004070006000200050302000000060000000078050002000600040700030100000009",
                "500000008030007040001000900020603000000725000000800060009000100070400030800000005",
                "400000009070008030006000100050702000000065000000003020001000600080300070900000004",
                "100006009007080030000200400000500070300001002000090600060003050004000000900020001",
                "800000001050009040003000600070056000000980000000704020006000300090400050100000008",
                "010000009005080700300700060004250000000000000000840200008007500600000030090000001",
                "300000005020007040001000900080036000000028000000704060009000100070400020500000003",
                "400000003080002060007000900010508000000701000000026050009000700020600080300000004",
                "600005020040700000009080000010000302000000087000200104070400003500006000008090000",
                "007002000500090400010600000400050003060100000002007000000000810900000306000080059",
                "000007090000800400003060001420010000031000002605000000060400800500020006000009070",
                "000600001000020400300009050090005030000040200000100006570008000002000000080000090",
                "006003000900080200070400000003006000040700000800020090500000008000000709000510020",
                "010300000000009000000710050004050900200000006070800030600000002080030070009000400",
                "000008070000300200005040009260094000059000006401000000000200300100060004000007080",
                "000800300000010005004002070200007040000300807000050001907000060600009000050000000",
                "800000007040001030009000600000532000050108020000400000006000900010300040700000008",
                "400000008050002090001000600070503000000060000000790030006000100020900050800000004",
                "300000009010006050002000400070060000000701000000845070004000200060500010900000003",
                "000000789000100036009000010200030000070004000008500100300020000005800090040007000",
                "100000000006700020080030500007060030000500008000004900300800600002090070040000001",
                "700000005040001030002000900060008000000946000000103080009000200010300040500000007",
                "001020000300004000050600070080900005002003000400010000070000038000800069000000200",
                "007580000000030000000076005400000020090000100003060008010600900006800003200000040",
                "097000000301005000045000800003008400000020060000100009700004300000900001000060020",
                "003700000050004000100020080900000012000000400080010090007300000200090006040005000",
                "000000100600000874000007026030400000005090000100008002009050000200001008040300000",
                "100000004020006090005000800030650000000372000000098070008000500060900020400000001",
                "005300000800000020070010500400005300010070006003200080060500009004000030000009700",
                "000002005006700400000009008070090000600400700010000080060300100300000002400005000",
                "020000600400080007009000010005006000300040900010200000000700004000001050800090300",
                "900000007030008040006000200010389000000010000000205010002000600080400030700000009",
                "002400006030010000500008000007000002010000030900600400000007001000090080400200500",
                "100300000020090400005007000800000100040000020007060003000400800000020090006005007",
                "002600000030080000500009100006000002080000030700001400000004005010020080000700900",
                "003500100040080000600009000800000002050700030001000400000006009000020080070100500",
                "300000906040200080000060000050800020009000307000007000010042000000000010508100000",
                "000090050010000030002300700004500070800000200000006400090010000080060000005400007",
                "100500000200000030004060100006007000008000009400080200000009007040010600000005003"};

        List<String> rList = Arrays.asList(ice_packs);

        return insetGame(db, start, mContext.getString(R.string.difficulty_super), folderId, "SQU", rList);

    }

    private void insertFolder(SQLiteDatabase db, long folderID, String folderName) {
        long now = System.currentTimeMillis();
        db.execSQL("INSERT INTO " + SudokuDatabase.FOLDER_TABLE_NAME + " VALUES (" + folderID + ", " + now + ", '" + folderName + "');");
    }

    // TODO: sudokuName is not used
    private void insertSudoku(SQLiteDatabase db, long folderID, long sudokuID, String sudokuName, String data) {
        String sql = "INSERT INTO " + SudokuDatabase.SUDOKU_TABLE_NAME + " VALUES (" + sudokuID + ", " + folderID + ", 0, " + SudokuGame.GAME_STATE_NOT_STARTED + ", 0, null, '" + data + "', null, null);";
        db.execSQL(sql);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        Log.i(TAG, "Upgrading database from version " + oldVersion + " to "
                + newVersion + "");
        if (oldVersion <= 7) {
            createIndexes(db);
        }

        if (oldVersion <= 8) {
            db.execSQL("ALTER TABLE " + SudokuDatabase.SUDOKU_TABLE_NAME + " ADD COLUMN " + SudokuColumns.COMMAND_STACK + " TEXT");
        }
    }

    private void createIndexes(SQLiteDatabase db) {
        db.execSQL("create index " + SudokuDatabase.SUDOKU_TABLE_NAME +
                "_idx1 on " +
                SudokuDatabase.SUDOKU_TABLE_NAME + " (" + SudokuColumns.FOLDER_ID + ");");
    }
}
